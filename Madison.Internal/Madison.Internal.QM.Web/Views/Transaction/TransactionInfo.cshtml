@model Madison.Internal.QM.Web.ViewModels.TransactionViewModel

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend class="lead">Transaction Info</legend>

        <div>
            @Html.LabelFor(model => model.Transaction.TransactionType)
        </div>
        <div>
            @Html.DropDownListFor(model => model.Transaction.TransactionType.Id, new SelectList(Model.TransactionTypes, "Id", "Name"), new {id="transactionType" })
        </div>
        <div>
            @Html.LabelFor(model => model.Transaction.LoanType)
        </div>
        <div>
            @Html.DropDownListFor(model => model.Transaction.LoanType.Id, new SelectList(Model.LoanTypes, "Id", "Name"))
        </div>
        <div>
            @Html.LabelFor(model => model.Transaction.InterestType)
        </div>
        <div>
            @Html.DropDownListFor(model => model.Transaction.InterestType.Id, new SelectList(Model.InterestTypes, "Id", "Name"))
        </div>
        <div class="editor-label">
            <label for="categories">Endorsements</label>
        </div>
        <div class="editor-field">
            @foreach (var endorsement in Model.Endorsements)
            {
                @Html.CheckBoxFor(m => endorsement.Selected)
                @Html.DisplayFor(m => endorsement.Name)
                <br />
            }
        </div>
        <br />
        <div id="loanAmount">
            <div>
                @Html.LabelFor(model => model.Transaction.LoanAmount)
            </div>
            <div>
                @Html.TextBoxFor(model => model.Transaction.LoanAmount, new { id="loanAmountInput" })
                @Html.ValidationMessageFor(model => model.Transaction.LoanAmount, "Required", new { id="loanAmountValidationMessage" })
            </div>
        </div>
        <div id="salePrice">
            <div>
                @Html.LabelFor(model => model.Transaction.SalePrice)
            </div>
            <div>
                @Html.TextBoxFor(model => model.Transaction.SalePrice, new { id="salePriceInput" })
                @Html.ValidationMessageFor(model => model.Transaction.SalePrice, "Required", new { id="salesPriceValidationMessage" })
            </div>
        </div>
        <div id="originalDebtAmount">
            <div>
                @Html.LabelFor(model => model.Transaction.OriginalDebtAmount)
            </div>
            <div>
                @Html.TextBoxFor(model => model.Transaction.OriginalDebtAmount, new { id="originalDebtInput" })
                @Html.ValidationMessageFor(model => model.Transaction.OriginalDebtAmount, "Required", new { id="originalDebtValidationMessage" })
            </div>
        </div>
        <div id="unpaidPrincipal">
            <div>
                @Html.LabelFor(model => model.Transaction.UnpaidPrincipalAmount)
            </div>
            <div>
                @Html.TextBoxFor(model => model.Transaction.UnpaidPrincipalAmount, new { id="unpaidPrincipalInput" })
                @Html.ValidationMessageFor(model => model.Transaction.UnpaidPrincipalAmount, "Required", new { id="unpaidPrincipalValidationMessage" })
            </div>
        </div>
        <p>
            <input id="btnNext" type="button" onclick="nextClick()" value="Next" class="btn btn-large btn-success" />
        </p>
    </fieldset>
}

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            
            setTransactionFields();
            
            $("#transactionType").change(function () {
                setTransactionFields();
            });
        });

        function hideValidationMessages() {
            //$('#salesPriceValidationMessage').hide();
            //$('#originalDebtValidationMessage').hide();
            //$('#unpaidPrincipalValidationMessage').hide();
        }

        function setTransactionFields() {
            var selectedText = $("#transactionType option:selected").text();

            if (selectedText == 'Purchase') {
                $('#originalDebtAmount').hide();
                $('#unpaidPrincipal').hide();
                $('#salePrice').show();
            }
            else if (selectedText == 'Refinance') {
                $('#salePrice').hide();
                $('#originalDebtAmount').show();
                $('#unpaidPrincipal').show();
            }
            else if (selectedText == 'Reverse') {
                $('#salePrice').hide();
                $('#originalDebtAmount').show();
                $('#unpaidPrincipal').hide();
            }
            else {

            }
        }

        function nextClick() {

            var valid = true;
            if ($('#salePrice').is(':visible')) {
                if ($('#salePriceInput').val() == '') {
                    $('#salesPriceValidationMessage').show();
                    valid = false;
                }
            }

            if ($('#originalDebtAmount').is(':visible')) {
                if ($('#originalDebtInput').val() == '') {
                    $('#originalDebtValidationMessage').show();
                    valid = false;
                }
            }

            if ($('#unpaidPrincipal').is(':visible')) {
                if ($('#unpaidPrincipalInput').val() == '') {
                    $('#unpaidPrincipalValidationMessage').show();
                    valid = false;
                }
            }

            if ($('#loanAmount').is(':visible')) {
                if ($('#loanAmountInput').val() == '') {
                    $('#loanAmountValidationMessage').show();
                    valid = false;
                }
            }
            
            if (valid == false) {
                return;
            }

            $('form').submit();
        }
    </script>
}    
